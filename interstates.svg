<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="2000" height="1000" viewBox="0 0 300 155"
	xmlns:xlink="http://www.w3.org/1999/xlink">
<style><![CDATA[
* { stroke-linejoin: round; }
polyline { stroke-linecap: round; fill: none; stroke-width: 1;
	marker-mid: url('#station'); marker-end: url('#station'); marker-start: url('#station');
}
text {
	font-family: 'Trebuchet MS', 'Open Sans', sans-serif;
	font-size: 2pt;
}
text.eol {
	font-weight: bold; fill: white;
}
]]></style>
<script>//<![CDATA[
if (!Array.prototype.forEach)
Array.prototype.forEach=function(c,t){var T,k,o,l,v;if(this==null)throw new TypeError(' this is null or not defined');O=Object(this);l=O.length>>>0
Number.isInteger=Number.isInteger||function(v){return typeof v==="number"&&isFinite(v)&&Math.floor(v)===v};
if(typeof c!=="function")throw new TypeError(c+' is not a function');if(arguments.length>1)T=t;k=0;while(k<l){v='';if(k in O){v=O[k];c.call(T, v, k, O)}k++}};
var lines = [
	{
		num: 2, color: 'lightgrey',
		pnts:[
			'MTX','HTX'
		]
	},
	{
		num: 4, color: 'lightgrey',
		pnts:[
			'TPA','MCO','DAB'
		]
	},
	{
		num: 10, color: 'red',
		pnts:[
			'PHX','CGD','LAC','ELP','REV','SAT','IAH','LAF','BTR','MSY','ASD','MOB','TLH','LCQ','JAX'
		]
	},
	{
		num: 12, color: 'lightgrey',
		pnts:[
			'BTR','HDC','ASD'
		]
	},
	{
		num: 16, color: 'lightgrey',
		pnts:[
			'MCN','SAV'
		]
	},
	{
		num: 17, color: 'lightgrey',
		pnts:[
			'FLG','PHX'
		]
	},
	{
		num: 20, color: 'orange',
		pnts:[
			'REV','FTW','DAL','SHR','JAN','MEI','BHM','ATL','AGS','CAE','FLO'
		]
	},
	{
		num: 22, color: 'lightgrey',
		pnts:[
			'MEM','BHM'
		]
	},
	{
		num: 24, color: 'lightgrey',
		pnts:[
			'CHA','BNA','M34','GOR'
		]
	},
	{
		num: 25, color: 'lightgreen',
		pnts:[
			'ABQ','LAC'
		]
	},
	{
		num: 26, color: 'lightgrey',
		pnts:[
			'KNG','AVL','SPB','CAE','OGB','CHS'
		]
	},
	{
		num: 30, color: 'pink',
		pnts:[
			'FTW','DAL','TEX','LIT'
		]
	},
	{
		num: 530, color: '#FFE6EA',
		pnts:[
			'LIT','MON'
		]
	},
	{
		num: 35, color: 'blue',
		pnts:[
			'MCI','EMP','ICT','OKC','DTN','DAL','HIL','SAT','LRD'
		]
	},
	{
		num: '35W', color: 'blue',
		pnts:[
			'DTN','FTW','HIL'
		]
	},
	{
		num: 135, color: '#E6E6FF',
		pnts:[
			'ICT','SLN'
		]
	},
	{
		num: 335, color: '#E6E6FF',
		pnts:[
			'EMP','FOE'
		]
	},
	{
		num: 37, color: 'lightgrey',
		pnts:[
			'SAT','GWT','CRP'
		]
	},
	{
		num: 40, color: 'red',
		pnts:[
			'DAG','NDL','IGM','FLG','GUP','ABQ','SRA','TUC','AMA','OKC','FSM','LIT','MEM','BNA','TYS','AVL','STA','INT','GSO','DNC','RGH','BEN','ILM'
		]
	},
	{
		num: 45, color: 'lightgreen',
		pnts:[
			'DAL','IAH'
		]
	},
	{
		num: 49, color: 'lightgrey',
		pnts:[
			'TEX','SHR','LAF'
		]
	},
	{
		num: 55, color: 'deepskyblue',
		pnts:[
			'ORD','BMI','LIN','SPI','STL','SIK','MEM','JAN','HDC','MSY'
		]
	},
	{
		num: 155, color: '#CCF2FF',
		pnts:[
			'LIN','PIA'
		]
	},
	{
		num: 57, color: 'lightgrey',
		pnts:[
			'SIK','GOR','MVN','a1H2','CMI','ORD'
		]
	},
	{
		num: 59, color: 'grey',
		pnts:[
			'ASD','MEI','BHM','CHA'
		]
	},
	{
		num: 64, color: 'lightgrey',
		pnts:[
			'STL','MVN','ELB','SDF','LEX','CRW','BUC','LXV'
		]
	},
	{
		num: 65, color: 'green',
		pnts:[
			'IND','SDF','BNA','BHM','MGM','MOB'
		]
	},
	{
		num: 69, color: 'grey',
		pnts:[
			'VCT','IAH','SHR','MON','MEM','M34','ELB','IND'
		]
	},
	{
		num: '69C', color: 'lightgrey',
		pnts:[
			'GWT','MTX'
		]
	},
	{
		num: '69E', color: 'lightgrey',
		pnts:[
			'VCT','CRP','HTX','BRO'
		]
	},
	{
		num: '69W', color: 'lightgrey',
		pnts:[
			'VCT','GWT','LRD'
		]
	},
	{
		num: 70, color: 'orange',
		pnts:[
			'SLN','FOE','MCI','STL','a1H2','IND','DAY','CBO','HGR','BWI'
		]
	},
	{
		num: 72, color: 'lightgrey',
		pnts:[
			'CMI','SPI','HAE'
		]
	},
	{
		num: 73, color: 'grey',
		pnts:[
			'MYR','DIL','RCZ','HBI','GSO','MAR','ROA'
		]
	},
	{
		num: 74, color: 'lightgrey',
		pnts:[
			'MYR','WHV','LUM','LAU','RCZ','HBI','HPT','INT','MTA'
		]
	},
	{
		num: 74, color: 'lightgrey',
		pnts:[
			'IND','CMI','BMI','PIA'
		]
	},
	{
		num: 75, color: 'gold',
		pnts:[
			'DAY','LEX','TYS','CHA','MRT','ATL','MCN','LCQ','TPA','MIA'
		]
	},
	{
		num: 77, color: 'grey',
		pnts:[
			'CAE','CLT','STA','MTA','WYT','BUC','CRW','CBO'
		]
	},
	{
		num: 81, color: 'grey',
		pnts:[
			'TYS','KNG','WYT','ROA','LXV','HGR'
		]
	},
	{
		num: 85, color: 'blue',
		pnts:[
			'PTB','DNC','GSO','HPT','CLT','SPB','GRV','ATL','MGM'
		]
	},
	{
		num: 785, color: '#E6E6FF',
		pnts:[
			'GSO','DAN'
		]
	},
	{
		num: 95, color: 'green',
		pnts:[
			'BWI','PTB','RMT','WLN','BEN','FAY','LUM','DIL','FLO','OGB','SAV','JAX','DAB','MIA'
		]
	},
	{
		num: 495, color: '#CCE6CC',
		pnts:[
			'RGH','RMT'
		]
	},
	{
		num: 795, color: '#CCE6CC',
		pnts:[
			'GWW','WLN'
		]
	}
], points = {
	// IATA Codes
	ILM:{x:276,y:75,name:'Wilmington'},
	GSO:{x:240,y:45,name:'Greensboro'},
	INT:{x:230,y:45,name:'Winston-Salem'},
	AVL:{x:195,y:55,name:'Asheville'},
	TYS:{x:180,y:50,name:'Knoxville'},
	CLT:{x:220,y:65,name:'Charlotte'},
	HBI:{x:240,y:60,name:'Asheboro'},
	PTB:{x:275,y:35,name:'Petersburg'},
	DAN:{x:242,y:40,name:'Danville'},
	RCZ:{x:240,y:65,name:'Rockingham'},
	CAE:{x:220,y:85,name:'Columbia'},
	FAY:{x:255,y:65,name:'Fayetteville'},
	FLO:{x:240,y:80,name:'Florence'},
	OGB:{x:230,y:95,name:'Orangeburg'},
	CHS:{x:240,y:105,name:'Charleston SC'},
	ATL:{x:170,y:90,name:'Atlanta'},
	AGS:{x:205,y:92,name:'Augusta'},
	BNA:{x:160,y:50,name:'Nashville'},
	MEM:{x:140,y:65,name:'Memphis'},
	SIK:{x:140,y:55,name:'Sikeston'},
	STL:{x:140,y:30,name:'St Louis'},
	IND:{x:160,y:20,name:'Indianapolis'},
	DAY:{x:180,y:20,name:'Dayton'},
	LIT:{x:130,y:75,name:'Little Rock'},
	FSM:{x:120,y:60,name:'Fort Smith'},
	OKC:{x:100,y:60,name:'Oklahoma City'},
	AMA:{x: 95,y:65,name:'Amarillo'},
	ABQ:{x: 85,y:70,name:'Albuquerque'},
	GUP:{x: 80,y:65,name:'Gallup'},
	FLG:{x: 75,y:70,name:'Flagstaff'},
	IGM:{x: 70,y:70,name:'Kingman'},
	NDL:{x: 65,y:75,name:'Needles'},
	DAG:{x: 60,y:75,name:'Barstow'},
	MRT:{x:168,y:85,name:'Marietta'},
	CHA:{x:165,y:70,name:'Chattanooga'},
	MSY:{x:140,y:130,name:'New Orleans'},
	MGM:{x:160,y:110,name:'Montgomery'},
	BHM:{x:160,y: 90,name:'Birmingham'},
	MEI:{x:150,y:110,name:'Meridian'},
	JAN:{x:140,y:110,name:'Jackson'},
	MOB:{x:155,y:120,name:'Mobile'},
	BTR:{x:135,y:125,name:'Baton Rouge'},
	HDC:{x:140,y:125,name:'Hammond'},
	ASD:{x:145,y:125,name:'Slidell'},
	TLH:{x:170,y:125,name:'Tallahassee'},
	LCQ:{x:190,y:125,name:'Lake City'},
	JAX:{x:210,y:125,name:'Jacksonville'},
	MCN:{x:180,y:105,name:'Macon'},
	SAV:{x:220,y:110,name:'Savannah'},
	TPA:{x:190,y:135,name:'Tampa'},
	DAB:{x:210,y:135,name:'Daytona Beach'},
	MIA:{x:210,y:145,name:'Miami'},
	MCO:{x:200,y:135,name:'Orlando'},
	GWW:{x:270,y: 58,name:'Goldsboro'},
	ICT:{x:100,y: 40,name:'Wichita'},
	EMP:{x:105,y: 35,name:'Emporia'},
	MCI:{x:110,y: 30,name:'Kansas City'},
	FOE:{x:106,y: 30,name:'Topeka'},
	SLN:{x:100,y: 30,name:'Salina'},
	HGR:{x:270,y: 10,name:'Hagerstown'},
	BWI:{x:290,y: 10,name:'Baltimore'},
	ROA:{x:230,y: 30,name:'Roanoke'},
	CRW:{x:205,y: 25,name:'Charleston WV'},
	MYR:{x:260,y: 90,name:'Myrtle Beach'},
	CRP:{x:110,y:135,name:'Corpus Christi'},
	SAT:{x:100,y:125,name:'San Antonio'},
	IAH:{x:120,y:125,name:'Houston'},
	LRD:{x:100,y:135,name:'Laredo'},
	VCT:{x:110,y:130,name:'Victoria'},
	BRO:{x:110,y:150,name:'Brownsville'},
	M34:{x:151,y:41,name:'Calvert City'},
	LEX:{x:180,y:30,name:'Lexington KY'},
	SDF:{x:160,y:30,name:'Louisville'},
	MVN:{x:150,y:30,name:'Mt Vernon'},
	a1H2:{x:150,y:25,name:'Effingham'},
	ORD:{x:150,y:10,name:'Chicago'},
	CMI:{x:150,y:20,name:'Champaign'},
	BMI:{x:143,y:17,name:'Normal'},
	SPI:{x:140,y:22,name:'Springfield'},
	HAE:{x:135,y:22,name:'Hannibal'},
	PIA:{x:140,y:15,name:'Peoria'},

	// Amtrak Station Codes
	RGH:{x:260,y:50,name:'Raleigh'},
	DNC:{x:255,y:45,name:'Durham'},
	HPT:{x:235,y:50,name:'High Point'},
	RMT:{x:272,y:45,name:'Rocky Mount'},
	DIL:{x:245,y:75,name:'Dillon'},
	WLN:{x:270,y:50,name:'Wilson'},
	SPB:{x:205,y:70,name:'Spartanburg'},
	GRV:{x:197,y:75,name:'Greenville'},
	DAL:{x:102,y:110,name:'Dallas'},
	FTW:{x: 98,y:110,name:'Fort Worth'},

	// Personal TLAs
	STA:{x:220,y:55,name:'Statesville'},
	MAR:{x:238,y:40,name:'Martinsville'},
	MTA:{x:220,y:40,name:'Mt Airy'},
	BEN:{x:265,y:59,name:'Benson'},
	LAU:{x:245,y:67,name:'Laurenburg'},
	LUM:{x:250,y:70,name:'Lumberton'},
	KNG:{x:195,y:40,name:'Kingsport'},
	TUC:{x: 93,y:65,name:'Tucucari'},
	SRA:{x: 91,y:65,name:'Santa Rosa'},
	WYT:{x:208,y:35,name:'Wytheville'},
	CBO:{x:205,y:20,name:'Cambridge OH'},
	WHV:{x:260,y:75,name:'Whiteville'},
	MON:{x:135,y:85,name:'Monticello'},
	ELB:{x:155,y:30,name:'Elberfeld'},
	GOR:{x:145,y:40,name:'Goreville'},
	LIN:{x:141,y:20,name:'Lincoln'},

	HTX:{x:110,y:145,name:'Harlingen'},
	MTX:{x:105,y:145,name:'Mission'},
	GWT:{x:107,y:132,name:'George West'},

	REV:{x:95,y:120,name:'Reeves'},
	LAC:{x:85,y:110,name:'Las Cruces'},
	ELP:{x:90,y:115,name:'El Paso'},
	PHX:{x:75,y:100,name:'Phoenix'},
	CGD:{x:80,y:105,name:'Casa Grande'},
	TEX:{x:120,y:87,name:'Texarkana'},
	BUC:{x:207,y:27,name:'Buckley'},
	LXV:{x:235,y:27,name:'Lexington VA'},

	SHR:{x:120,y:110,name:'Shreveport'},
	LAF:{x:130,y:125,name:'Lafayette'},

	DTN:{x:100,y:105,name:'Denton'},
	HIL:{x:100,y:115,name:'Hillsboro'},

}, doc = document.getElementsByTagName('svg')[0], ns = 'http://www.w3.org/2000/svg', gC,gL,gN
;
document.addEventListener('DOMContentLoaded', function() {
	gL = document.getElementById('lines')
	gC = document.getElementById('cities')
	gN = document.getElementById('numbers')
	var pntPlaced = [],
		axisMain = 100
	// Arrange Cities on East-West Routes
	lines.forEach(function(l) {
		var lastX = -10
		if (!Number.isFinite(l.num) || l.num % 10 || l.num >= 100) return
		l.pnts.forEach(function(p,i) {
//console.log('looking to place ' + p)
			var axisCross = Math.max(lastX + 10, i * 10)
			if (pntPlaced.indexOf(p) == -1) {
				pntPlaced.push(p)
				points[p].x = axisCross
				points[p].y = axisMain
			} else {
				points[p].x = Math.max(points[p].x, axisCross)
			}
			lastX = points[p].x
//console.log(points[p].x + ',' + points[p].y)
		})
		axisMain -= 20
	})
	axisMain = 0
	// Arrange Cities on North-South Routes, starting with placed cities
	lines.forEach(function(l) {
		var lastX = axisMain,
			lastY = -10
		if (!Number.isFinite(l.num) || l.num % 10 != 5 || l.num >= 100) return
		l.pnts.forEach(function(p,i) {
			var axisCross = Math.max(lastY + 5, i * 10)
			if (pntPlaced.indexOf(p) == -1) {
				pntPlaced.push(p)
				points[p].x = lastX
				points[p].y = axisCross
			} else {
//				points[p].x = Math.max(points[p].x, lastX)
//				points[p].y = Math.max(points[p].y, axisCross)
			}
			lastX = points[p].x
			lastY = points[p].y
		})
		axisMain += 20
	})
	axisMain = 0
	// Arrange Cities on North-South Routes
	lines.forEach(function(l) {
		var lastX = axisMain,
			lastY = -10
		if (!Number.isFinite(l.num) || l.num % 10 != 5 || l.num >= 100) return
		l.pnts.forEach(function(p,i) {
			var axisCross = Math.max(lastY + 5, i * 10)
			if (pntPlaced.indexOf(p) != -1) {
				points[p].x = Math.max(points[p].x, lastX)
				points[p].y = Math.max(points[p].y, axisCross)
			}
			lastX = points[p].x
			lastY = points[p].y
		})
		axisMain += 20
	})
	// Draw Interstate Lines
	lines.forEach(function(l) {
if (!Number.isFinite(l.num) || l.num % 10 % 5 || l.num >= 100) return
		var line = [], p = document.createElementNS(ns,'polyline')
		l.pnts.forEach(function(p,i) {
			line.push(points[p].x + ',' + points[p].y)

			// Signal End of Line
			if ((i == 0 || i == l.pnts.length - 1) && Number.isInteger(l.num)) {
				var num = document.createElementNS(ns,'text'),
					rect = document.createElementNS(ns,'rect'),
					scaleFactor = 1,
					box
				num.appendChild(document.createTextNode(l.num))
				num.setAttribute('class', 'eol')
				num.setAttribute('x', points[p].x + 2)
				num.setAttribute('y', points[p].y + 7)
				gN.appendChild(num)
				if (['pink','lightgreen','lightgrey'].indexOf(l.color) > -1) {
					num.style.fill = 'dimgrey'
				} else if (l.num >= 100) {
					num.style.fill = 'grey'
					scaleFactor = 2
					num.setAttribute('y', points[p].y * scaleFactor)
					num.setAttribute('x', (points[p].x + 2) * scaleFactor)
					num.setAttribute('transform', 'scale(' + 1 / scaleFactor + ')')
				}
				box = num.getBBox()
				rect.setAttribute('x', box.x / scaleFactor - 0.5)
				rect.setAttribute('y', box.y / scaleFactor - 0.25)
				rect.setAttribute('width', box.width / scaleFactor + 1)
				rect.setAttribute('height', box.height / scaleFactor + 0.5)
				rect.setAttribute('fill', l.color)
				rect.setAttribute('rx', 1)
				rect.setAttribute('ry', 1)
				gN.insertBefore(rect, num)
			}
		})
		p.setAttribute('points', line.join(' '))
		p.setAttribute('style', "stroke: " + l.color)

		if (l.num % 5 == 0 && l.num < 100) {
			gL.appendChild(p)
		} else {
			gL.insertBefore(p, gL.childNodes[0])
		}
	})
	// Draw City Names
	Object.getOwnPropertyNames(points).forEach(function(p) {
		var t = document.createElementNS(ns,'text'), pnt = points[p]
		t.appendChild(document.createTextNode(pnt.name))
		t.setAttribute('x', pnt.x + 1)
		t.setAttribute('y', pnt.y + 3)
		gC.appendChild(t)
	})
})
//]]></script>
<defs>
	<circle id="round" r="1" style="fill: white; stroke: black; stroke-width: .6;"/>
	<circle id="point" r=".4" style="stroke: none; fill:black; stroke-width: .4;"/>
	<marker id="terminus" viewBox="0 0 3 3" refX="1.5" refY="1.5" markerWidth="3" markerHeight="3" markerUnits="userSpaceOnUse">
		<use x="1.5" y="1.5" xlink:href="#round" />
		<use x="1.5" y="1.5" xlink:href="#point" />
	</marker>
	<marker id="transfer" viewBox="0 0 3 3" refX="1.5" refY="1.5" markerWidth="3" markerHeight="3" markerUnits="userSpaceOnUse">
		<use x="1.5" y="1.5" xlink:href="#round" />
	</marker>
	<marker id="station" viewBox="0 0 3 3" refX="1.5" refY="1.5" markerWidth="3" markerHeight="3" markerUnits="userSpaceOnUse">
		<circle cx="1.5" cy="1.5" r="1" style="stroke: none; fill: currentColor; stroke-width: .4;"/>
	</marker>
</defs>
<!--
<use x="50" y="50" xlink:href="#city" />
<use x="60" y="50" xlink:href="#city" />
<use x="0" y="0" xlink:href="#city" />
<use x="0" y="100" xlink:href="#city" />
<use x="200" y="0" xlink:href="#city" />
<use x="200" y="100" xlink:href="#city" />
-->
<polyline points="10,90 50,70 55,50" style="fill: none; stroke: red; stroke-width: 1; marker-end: url(#terminus); marker-mid: url(#transfer); display: none" />
<polyline points="10,10 50,30 60,40 65,40 65,50" style="fill: none; stroke: red; stroke-width: 1; marker-end: url(#terminus); display: none" />
<g id="lines"></g>
<g id="cities"></g>
<g id="numbers"></g>
</svg>
